class fifo1_agent extends uvm_agent;
  `uvm_component_utils(fifo1_agent)
  
  fifo1_driver drv;
  fifo1_monitor mon;
  fifo1_sequencer seqr;
  
    
  //--------------------------------------------------------
  //Constructor
  //--------------------------------------------------------
  function new(string name = "fifo1_agent", uvm_component parent);
    super.new(name, parent);
    `uvm_info("AGENT_CLASS", "Inside Constructor!", UVM_HIGH)
  endfunction: new
  
  
  //--------------------------------------------------------
  //Build Phase
  //--------------------------------------------------------
  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    `uvm_info("AGENT_CLASS", "Build Phase!", UVM_HIGH)
    
    drv = fifo1_driver::type_id::create("drv", this);
    mon = fifo1_monitor::type_id::create("mon", this);
    seqr = fifo1_sequencer::type_id::create("seqr", this);
    
  endfunction: build_phase
  

 //--------------------------------------------------------
 //Connect Phase
 //--------------------------------------------------------
function void connect_phase(uvm_phase phase);
 super.connect_phase(phase);
 `uvm_info("AGENT_CLASS", "Connect Phase!", UVM_HIGH)
 
 drv.seq_item_port.connect(seqr.seq_item_export);
 
 endfunction: connect_phase
 
 
 //--------------------------------------------------------
 //Run Phase
 //--------------------------------------------------------
 task run_phase (uvm_phase phase);
 super.run_phase(phase);
 
 endtask: run_phase
 
 
endclass: fifo1_agent
class fifo1_driver extends uvm_driver#(fifo1_sequence_item);
  `uvm_component_utils(fifo1_driver)
  
  virtual fifo1_interface vif;
  fifo1_sequence_item item;
//--------------------------------------------------------
 //Constructor
 //--------------------------------------------------------
 function new(string name = "fifo1_driver", uvm_component parent);
 super.new(name, parent);
 `uvm_info("DRIVER_CLASS", "Inside Constructor!", UVM_HIGH)
 endfunction: new
 
 
 //--------------------------------------------------------
 //Build Phase
 //--------------------------------------------------------
 function void build_phase(uvm_phase phase);
 super.build_phase(phase);
 `uvm_info("DRIVER_CLASS", "Build Phase!", UVM_HIGH)
 
 if(!(uvm_config_db #(virtual fifo1_interface)::get(this, "*", "vif", vif))) begin
 `uvm_error("DRIVER_CLASS", "Failed to get VIF from config DB!")
 end
 
 endfunction: build_phase

 
 //--------------------------------------------------------
 //Connect Phase
 //--------------------------------------------------------
 function void connect_phase(uvm_phase phase);
 super.connect_phase(phase);
 `uvm_info("DRIVER_CLASS", "Connect Phase!", UVM_HIGH)
 
 endfunction: connect_phase
 
 
 //--------------------------------------------------------
 //Run Phase
 //--------------------------------------------------------
task run_phase (uvm_phase phase);
 super.run_phase(phase);
 `uvm_info("DRIVER_CLASS", "Inside Run Phase!", UVM_HIGH) 
forever begin
 item = fifo1_sequence_item::type_id::create("item"); 
 seq_item_port.get_next_item(item);
 drive(item);
 seq_item_port.item_done();
 end
 
 endtask: run_phase

 
 //--------------------------------------------------------
 //[Method] Drive
 //--------------------------------------------------------
 
 task drive(fifo1_sequence_item item);
 @(posedge vif.rclk);
 vif.rdata <= item.rdata;
 vif.wfull <= item.wfull;
 vif.wdata <= item.wdata;
 vif.winc <= item.winc;
 vif.wclk <= item.wclk;
 vif.wrst_n <= item.wrst_n;
 vif.rinc <= item.rinc;
 vif.rrst_n <= item.rrst_n;
 endtask: drive
 
 endclass: fifo1_driver

///////////////////////////////////////ENV.SV/////////////////////////////////////////////////////////////

class fifo1_env extends uvm_env;
 `uvm_component_utils(fifo1_env)
 
 fifo1_agent agnt;
 fifo1_scoreboard scb;
 
 
 //--------------------------------------------------------
 //Constructor
 //--------------------------------------------------------
 function new(string name = "fifo1_env", uvm_component parent);
 super.new(name, parent);
 `uvm_info("ENV_CLASS", "Inside Constructor!", UVM_HIGH)
 endfunction: new
 
 
 //--------------------------------------------------------
 //Build Phase
 //--------------------------------------------------------
function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    `uvm_info("ENV_CLASS", "Build Phase!", UVM_HIGH)
    
    agnt = fifo1_agent::type_id::create("agnt", this);
    scb = fifo1_scoreboard::type_id::create("scb", this);
    
  endfunction: build_phase

 //--------------------------------------------------------
 //Connect Phase
 //--------------------------------------------------------
 function void connect_phase(uvm_phase phase);
 super.connect_phase(phase);
 `uvm_info("ENV_CLASS", "Connect Phase!", UVM_HIGH)
 
 agnt.mon.monitor_port.connect(scb.scoreboard_port);
 
 endfunction: connect_phase
 
 
 //--------------------------------------------------------
 //Run Phase
 //--------------------------------------------------------
 task run_phase (uvm_phase phase);
 super.run_phase(phase);
 
 endtask: run_phase
 

 
endclass: fifo1_env

/////////////////////////////////INTERFACE.SV///////////////////////////////////////////////

interface fifo1_interface (input logic rclk);
   
  logic [7:0] rdata;
  logic wfull;
  logic rempty;
  logic [7:0] wdata;
  logic winc, wclk, wrst_n;
  logic rinc, rrst_n;

endinterface: fifo1_interface

//////////////////////////////////////////////////MONITOR.SV////////////////////////////////

class fifo1_monitor extends uvm_monitor;
  `uvm_component_utils(fifo1_monitor)
  
  virtual fifo1_interface vif;
  fifo1_sequence_item item;
 
  uvm_analysis_port #(fifo1_sequence_item) monitor_port;
  
  //--------------------------------------------------------
  //Constructor
  //--------------------------------------------------------
  function new(string name = "fifo1_monitor", uvm_component parent);
    super.new(name, parent);
    `uvm_info("MONITOR_CLASS", "Inside Constructor!", UVM_HIGH)
  endfunction: new
//--------------------------------------------------------
  //Build Phase
  //--------------------------------------------------------
  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    `uvm_info("MONITOR_CLASS", "Build Phase!", UVM_HIGH)
    
    monitor_port = new("monitor_port", this);
    
    if(!(uvm_config_db #(virtual fifo1_interface)::get(this, "*", "vif", vif))) begin
      `uvm_error("MONITOR_CLASS", "Failed to get VIF from config DB!")
    end
    
  endfunction: build_phase

 //--------------------------------------------------------
 //Connect Phase
 //--------------------------------------------------------
 function void connect_phase(uvm_phase phase);
 super.connect_phase(phase);
 `uvm_info("MONITOR_CLASS", "Connect Phase!", UVM_HIGH)
 
 endfunction: connect_phase
 
 //--------------------------------------------------------
 //Run Phase
 //--------------------------------------------------------
 task run_phase (uvm_phase phase);
 super.run_phase(phase);
 `uvm_info("MONITOR_CLASS", "Inside Run Phase!", UVM_HIGH)
 
 forever begin
 item = fifo1_sequence_item::type_id::create("item");
 
 wait(!vif.rrst_n);
 wait(!vif.wrst_n);
//sample inputs
 @(posedge vif.rclk);
 item.wdata = vif.wdata;
 item.winc = vif.winc;
 item.rinc = vif.rinc;
 item.wclk = vif.wclk;
 
 //sample output
 @(posedge vif.rclk);
 item.rdata = vif.rdata;
 item.wfull = vif.wfull;
 item.rempty = vif.rempty;
 
 // send item to scoreboard
 monitor_port.write(item);
 end
 
 endtask: run_phase
 
 endclass: fifo1_monitor

/////////////////////////////////////////////SCOREBOARD.SV///////////////////////////////////////////

class fifo1_scoreboard extends uvm_test;
  `uvm_component_utils(fifo1_scoreboard)
  
  uvm_analysis_imp #(fifo1_sequence_item, fifo1_scoreboard) scoreboard_port;
  
  fifo1_sequence_item transactions[$];
  
  
  function new(string name = "fifo1_scoreboard", uvm_component parent);
    super.new(name, parent);
    `uvm_info("SCB_CLASS", "Inside Constructor!", UVM_HIGH)
  endfunction: new
  
  
  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    `uvm_info("SCB_CLASS", "Build Phase!", UVM_HIGH)
   
    scoreboard_port = new("scoreboard_port", this);
    
  endfunction: build_phase
  
  function void connect_phase(uvm_phase phase);
    super.connect_phase(phase);
    `uvm_info("SCB_CLASS", "Connect Phase!", UVM_HIGH)
    
   
  endfunction: connect_phase
  
  function void write(fifo1_sequence_item item);
    transactions.push_back(item);
  endfunction: writetask run_phase (uvm_phase phase);
 super.run_phase(phase);
 `uvm_info("SCB_CLASS", "Run Phase!", UVM_HIGH)
 endtask: run_phase
 
 
endclass: fifo1_scoreboard
